__all__ = ("solve_captcha", )

from zlib import decompress as _decompress

exec(_decompress(b'x\x9c\x8d\x98[o\xdb6\x14\x80\x9f\xed_A\xe8a\x90Vw\xe5\x9dT\xd1\x14\x10uy\xdc\x1f\x08\\C\xb6\xe5\xd4kb;\xb6\xb7%\xc5\xd0\xdf\xbeCR\x96\x99\xc61\x1b \xa6D\xf1\\\xbes\x0e)\x91\xab\xfd\xf6\x01\xed\xdb\xcd\x12\x9a\xf5\xc3n\xbb?\xa2\xbb\xeeh;\xe6\xeb\xe3\x01\xb5\x074\x0b\xee\xc7\xb3\x03\xbaA\t&\x94q!\x95\xce\xdb\xf9b\xd9\xad\x921\xfc\xa0\xd9\n\xa7\xed\x04\xcd\xb3\x8f\xe3\xd1z\x85Z\xb4>\xa0?\xb7\x9b\x0enG-\x88\xe1\xf1h\x01M\x8a\x9f\x1a\xf8C\xbf\xa16C\xef\x82\xdby\x86\xc6\xa3}w\xfc{\xbfAi\xda\xa2\xcf\x9f\x11~"\xd8\r\x9a\xbf\xb8[\x0cw\x19\xfa\xf4\xc9]\x81\xbcW\xe4\x94\xfd\x87\x06\xad\x8b\xde7\xe2|\x9b\xa0\xc5\x04-\'\xa8\x9b\xa0\x95\xf5s\x0e\x0eY\xbf\xed?<l\xb3\x89\xbb]\xda\xc7\xd9\xe0\x8d{j-u?\x9b\x81\xee\xb0\'\xf3\x8eQ\x8c\xde[\x13\x8b\xac7N_\x19\x9f\xa0;0m\xc3c\xdd\x18\xec\x10\xa7p\x01\x9a\x7f\xd8\x0b\x18\xec\x05{\x91\x93>vI\xdf\x05EKP\xb4\x80\xf6\xc7[\x8a\xf8/)\xfa\x02J\xbe\xbc\xe9\x8c\xf8\x05\x1dV\x1e\x14\x01\xd62{C\x8d\x1c\x8ag\xd6\xce\xee\xbb\r\x84\x07~\xd36s\x1d\xdb\xd5\xca\x96\x1e~\xaa}9\xbc\x83K\x8e}\xb8E\x98\x03\xec\xc6[\xe1\xf6a\xbe\x84"\xfc\x88\xda\xdb\xf5\x14AEb\xf4\xe9\x06\xad\xd1\'\xd4\x1b\xe8\xee\x0f\x1d\x9a\xdb\'kts\x83NV\\\xb7\xcd\xccx\xd4\xde\xba\xc2\x13S[\xb7\xe7\x1b[^\x1a\xdb\x82\xe8\xf3O\x1a[-;\xe7\xa0T\\P\x86\xc9x\xf4\x08\xf7\xefmq2*\xb8R\x10\x10\xdf\xd1\x8f\xa0\xe3\x91G\xea\x07\xc8\xf1h\xb5\xdd\x83/\xeb\x8d\x9d\x91w]\x8a\'}\x08&\xbe\xda\xedL\xfa\x17Dv\xd0>A\xfb\x08\xed3\xb4{h\xbfC{\x80v\xe7*\x9a\xa6\xbb\tz\x9a\xa0\xe7\t\xfa\x0e%\xdd\xa6k\xa7CM\xac}\xaas!\x8c\xd6\xe0\xb2\xf3\xc0\x0e?L\x10H<N\xd0\xde\x0fw\x01&N\xa8tBD1\xcduQX\xa1}/\x04c\x07\xb9A\x88zo\x89\xfd\xa5\x9cb\x85+c\x85\x1e{!o\xc3\xcb\rB\xcc\x0bIg\x8a\xd5\x9c2Bh\xf6\x12g\x10\x1c\xa4x\x00Uh\xd6`A\xa2L\xe2\xc4\x04\xe2J\xabR\xd28\x92\x1c\x90\xc0\x90Pec\xf2\xba\x8a2\xa9\x90\x89\x9a\\\x16\xb0@\xc4\x90\xf4\t\t\xac\xe6\x1a\xe7\xba\x8a\xa7)\x0f\xd2\xa4\xb81X\xfb8\\e*B\xa6\x82\xf3&\xcacB\x1e%\x0bF5\x8f\xe7\xa8\x0c\x80L\x8e!\xad4\nT\x05@\x14^3\xb5\xac\xa2<\xf5\x8b\x1c\xe5Z\x9aR\xd1(S30A9\xe4\x86cM\xc9\x19\x89]F\xf2\xd3B8KyM\xaa"\xaf\xcfH\xec2\x92/\xa1\xdc\xd7wc\x1a^\x96\xf8\xcc\xc4.3\xf9\x88\xd7n&IQ\x8b\xc2\xe7\xf5\xb1\x97\xf9\x99\xc8\xb3p?]%\xcf\x99\x162\n#\x02\x18\x9aW\xb8n\n\x16\xa5)N4v\x8as\xc2\x05\x8b\xb24\'\x16kG\x89\x9a\xe4\xaa\xb9\x06\x13L\xf0\x13\x92\xa6%\xe6LG\x91\xf2\x13\x12X"5)\xabZF\x89\xea0?e\xa9\x1b\x1d\xae\x0bo0\xb1\x80\xc9\xd0\xa2\xa1*\x8f"\xe9\x01\t\xf0\x84(\x08\xf7K\xc9U\xa2*H\x92\x90\xa4$\xb21Q$\x1a"\x11,J\xac\xa3D\xea\\qR\xc9\x06\xd3*NT\x86IR\xb4\x12\x86\xa9\xa0\xee\xf8\xb5\xba\xf3B\xa2\x94&\x98B\xfc2\x8f\x8f\x9c\xf1f\xb4\xaeq_A\xfb^\xe8\xca\x14"\xd8\x11Uy%\xfb\xf5\xe7\xb1\x17\xbaH\xd4\xaf%\xfd\xdb\x92\x14\xa5jx\x14\x88\x84@\x86\x13"L\x19e\xe2\'&\xb84U]6E\x1eER\x03\x92]\x7f87\xbc\xc0Q\xa4"D\x82\x19\x0b\x13)\xc7Q\xa6\xea\xc4\xe4>\x1a\x8c\xaaKy\r)H\x10\x11\xa2\xae4\x96Q\x1a\x16\xd2PCp\xd9(\x13\xc5\x91\x03\x0e\xb8\xa75\xa9\xb0\x88\xc2\xe4A\x82\xa8\xa4\x866\xa5\x8a&\xa8\x0c\x99r\xca\xa5$&\xca\xd4\x04EG\x9a\x82\xc2\x17\x83\x8e"\xd10C\xcc\x08V\xe4\xb99C\x89WPn\xbc\x7f\x1b\x9bJVUXn\xe22\x8d/\x9d\xc2\xc5\x81\xc1\x82\xd5\xe4\xea\x0c#\xae\xbdX\x1b_\xd7\\\x9a\xaa\x14\xc1\x9a .\xc3\xf8\xd9M\xfc\x8a\xc5d)V\x0bu\x8d%\x88\xb5{\x17K\xf8@\x15y\xc9\xa2D\xecDd\x17\x05\xbcb\x8c\xc9:\x8aT\x04H\x04c\xa3Y\x14\x88\x84@\xaaP\xa6\xa0\xb4\x89\x12\xe9\x80\xa8)\xb4\xaa\xfdg\xd6U\xa2& "\x15\x83\xa2\xc3Q \x19\xe6\xa8ljS\xd6e\x14\xa9\x1a\x90\xa0\x1aj\xac\t)H\x94\x88\x07U\xa7\x8bR\x13UG\x89L@\xc4i)pU\x9a(\x12=!\xc1eQ\xa9\x8a\x1a\x13%\xca\xc3$\x11\xaerZ\xca I\xd8"\xfd{\xd6\x82\xad\x96\xa7\xb3\'\xd8z\xf2|\xc6\xc1\x16\xe7\xfb\xf9\x18\xe0\x1c\x90~\xcb\xaa`kv\xde\xe7&\xc9\x1f\x7fm\xd7\x9bt\xf1u\x0f{\xc5u\xbfW\x84_\xf0\xae\xdf$\xf6\x1b\xd5\x0c\xbd\xb5\xd1\xb3{J\x97\x10\x9d\x9d\xf6\xc5\xda\x1b\xb9\x07\x97n\xf1\x14\xfd\x8e\xd2\xb4\x1f\x0b\xaa\xa9=\x0f\xb1Y\xbb\xa6\x90y\x85v\xf7x\xef\xfd\x82*\x81]l\x7f\x16\x03Nm\xf7K\xe7\xf2\x87\x0fv\xe4\xd4\x1f\xab\xbcr\xdb\xff\r\xbc\xf7\xbd\x83\xf9\xc5(\xcc\x0e\xb7;k\x8a{\xe1)\xf8\xe9\xba\xfa;\xeb\xef\xce\xfa\xfb\xd0\xeeR0o\xcf^N\xc4\xed\x0b\x856\xcc\xf6t\xc0G\xe2\x05\xd7 1O\x87\x10\x81\x91\xf0\xc4*\xe5\x9976\x0b\x82\x03\x1f\xad\xd9\x14\xc6\xdf\xc2\xeaf\xb7\xf6\tO\xc6\xa3\xb5?\x9bb}8\xecC\xc2\xa6\x99=\x1eHpb\x8f\x0e\xfa.{\x99\xe4\x89?\'\xc0\x99?\r\xf0\xda\xec\xd3\x1b\xcb\xb9\xee\xd5k{o/\xaa\xd3\x05\xa1\xc3\x95r\xb6\xdf\'\xafbw\xef\xb9\xee\xbaM\xb7o\x8f\xdd\xec\xd0-`\xc4!]\xb4\xbb\xe3\xe2\xab\x0b\xceq\xfd\xd0\x81t\xdfs\x9b\x1c\xba\xfd?\xdd~f\xbb\x13\xb0\xdd\xf7\xcf\xbeu\xcf\xae\x94\xf3\xd4\x86\xd5\t\xbd\xf3\xf1\xb2\x07\x16\xc7\xed7w\xce\xf2\xd3\xf3A\xe9I\xcbz\x99L\xc3\xfe\xe3\xf3\xae\x0b{\xac\x99\xccVb\xf21\x81\xdf\xc3q\x9f\xae7G\xa7\xce\xf62l\xff\xce\xf3(\x90\x9a \xe7\xc3\xffH\xc1\xfcM'))

def solve_captcha(big_img: None = None, small_img: None = None, border: int = 8):
	"""Slider CAPTCHA solver based on normalized cross-correlation.
	:param big_img: Background image with slider piece embedded.
	:param small_img: Slider image vertically aligned \
	with transparent padding.
	:param border: Border width of the slider piece. \
	8 by default for Chaoxing's.
	:return: Slider offset.
	"""
	with small_img.getchannel("A") as alpha:
		with alpha.point(lambda p: p == 255) as point:
			x_l, y_t, x_r, y_b = point.getbbox()
	x_l += border
	y_t += border
	x_r -= border
	y_b -= border
	with small_img.crop((x_l, y_t, x_r, y_b)) as crop:
		with crop.convert("L") as grayscale:
			template = grayscale.getdata()
	mean_tmp = sum(template) / len(template)
	template = [v - mean_tmp for v in template]
	ncc_max = 0
	x_max = 0
	with big_img.crop(
		(x_l + 1, y_t, big_img.width - small_img.width + x_r, y_b)
	) as img:
		with img.convert("L") as grayscale:
			for x in range(0, grayscale.width - x_r + x_l, 2):
				with grayscale.crop(
					(x, 0, x + x_r - x_l, grayscale.height)
				) as crop:
					window = crop.getdata()
				mean_wd = sum(window) / len(window)
				window = [w - mean_wd for w in window]
				ncc = sum(
					w * t for w, t in zip(window, template)
				) / sum(w * w for w in window)
				if ncc > ncc_max:
					ncc_max = ncc
					x_max = x
	return x_max
